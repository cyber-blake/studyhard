# * 1
def calc(str):
    a, b, op = str.split()
    a = float(a)
    b = float(b)
    try:
        return a / b
    except ZeroDivisionError:
        return "ERROR"


print(calc(input()))


# * 2
def filter_hex_string(string):
    try:
        int(string, 16)
        return True
    except ValueError:
        return False


# –∑–∞–¥–∞—á–∞: —á—Ç–æ–±—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞–ª–∏ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ñ–∏–ª—å—Ç—Ä
# –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, -> —Ä–∞–∑–±–∏–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
def check_password(*args):
    args = list(args)
    args = args.split()
    return filter(filter_hex_string, args)


# print(list(check_password(input())))


# * 3
olympiad1 = {
    "name": "–ü—Ä–æ–±–Ω–∞—è –≤—ã—à–∫–∞",
    "winners": {
        "–û–ª–µ—Å—è –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫ova": 594,
        "–û–ª–µ–≥ –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤": 587,
        "–û–Ω–∏—Å–∏–º –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤": 581,
    },
}

olympiad2 = {
    "name": "–ì–æ—Ä–Ω—ã–µ –≤–æ—Ä–æ–±—å–∏",
    "winners": {
        "–û–ª—å–≥–∞ –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤–∞": (20, 20, 19, 20),
        "–û–ª–µ—Å—è –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤–∞": (19, 19, 20, 20, 17),
        "–û—Ñ–µ–ª–∏—è –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤–∞": (20, 20, 20, 20, 13),
    },
}


def checkOlympiads(name):
    try:
        points1 = olympiad1["winners"][name]
        print(f'[{olympiad1["name"]}] –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {points1}')
    except KeyError:
        print(f'[{olympiad1["name"]}] –ø—Ä–∏–∑—ë—Ä')
    finally:
        print()
    try:
        points2 = olympiad2["winners"][name][4]
        print(f"[{olympiad2['name']}] –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {points2}")
    except IndexError:
        print(f"[{olympiad2['name']}] –ø–æ–±–µ–¥–∏—Ç–µ–ª—å")
    except KeyError:
        print(f"[{olympiad2['name']}] –ø—Ä–∏–∑—ë—Ä")
    finally:
        print()


checkOlympiads("–û–ª—å–≥–∞ –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤–∞")
checkOlympiads("–û–ª–µ—Å—è –û–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤–∞")


# *4
def terribly_impolite_program():
    try:
        while True:
            pass
    except KeyboardInterrupt:
        print("–¢—ã –Ω–µ –ø—Ä–æ–π–¥—ë—à—å!")
        terribly_impolite_program()


terribly_impolite_program()


# * 5
class LizardInGlassError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —è—â–µ—Ä–∏—Ü—ã –≤ —Å—Ç–∞–∫–∞–Ω–µ"""

    pass


class ToiletQuestionError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç—É–∞–ª–µ—Ç–µ"""

    pass


class BarOnFireError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≥–æ—Ä–∞–Ω–∏—è –±–∞—Ä–∞"""

    pass


class NegativeOrderError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""

    pass


def process_order(order):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞—Ä–µ"""

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if "—è—â–µ—Ä–∏—Ü" in order.lower() or "lizard" in order.lower():
            raise LizardInGlassError("–ú—ã –Ω–µ –ø–æ–¥–∞–µ–º —è—â–µ—Ä–∏—Ü –≤ —Å—Ç–∞–∫–∞–Ω–µ!")

        if "—Ç—É–∞–ª–µ—Ç" in order.lower() or "toilet" in order.lower():
            raise ToiletQuestionError("–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç—É–∞–ª–µ—Ç!")

        if "qwerty" in order.lower():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑: qwerty")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–∫–∞–∑–∞
        import re

        match = re.search(r"(-?\d+)", order)

        if match:
            quantity = int(match.group(1))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if quantity < 0:
                raise NegativeOrderError("–ù–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            assert quantity <= 1000, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–∫–∞–∑: {quantity} –∫—Ä—É–∂–µ–∫"
            assert quantity >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"

            return f"–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {quantity} –∫—Ä—É–∂–µ–∫ –ª–∏–º–æ–Ω–∞–¥–∞"

        else:
            raise ValueError("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ")

    except LizardInGlassError as e:
        return f"–û—à–∏–±–∫–∞: {e}"

    except NegativeOrderError as e:
        return f"–û—à–∏–±–∫–∞: {e}"

    except ToiletQuestionError:
        # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–æ–∂–∞—Ä –≤ finally –±–ª–æ–∫–µ
        raise BarOnFireError("–ë–∞—Ä –≤—Å–ø—ã—Ö–∏–≤–∞–µ—Ç –ø–ª–∞–º–µ–Ω–µ–º –æ—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç—É–∞–ª–µ—Ç–µ!")

    except ValueError as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞: {e}"

    except AssertionError as e:
        return f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–∫–∞–∑: {e}"

    finally:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–∫–∞–∑: '{order}'")


def bar_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∞–Ω–µ–∫–¥–æ—Ç–∞"""

    orders = [
        "–∫—Ä—É–∂–∫—É –ª–∏–º–æ–Ω–∞–¥–∞",
        "2 –∫—Ä—É–∂–∫–∏ –ª–∏–º–æ–Ω–∞–¥–∞",
        "0 –∫—Ä—É–∂–µ–∫ –ª–∏–º–æ–Ω–∞–¥–∞",
        "999999999 –∫—Ä—É–∂–µ–∫ –ª–∏–º–æ–Ω–∞–¥–∞",
        "—è—â–µ—Ä–∏—Ü—É –≤ —Å—Ç–∞–∫–∞–Ω–µ",
        "-1 –∫—Ä—É–∂–∫—É –ª–∏–º–æ–Ω–∞–¥–∞",
        "qwerty –∫—Ä—É–∂–µ–∫ –ª–∏–º–æ–Ω–∞–¥–∞",
    ]

    print("–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç:\n")

    for order in orders:
        try:
            result = process_order(order)
            print(f"‚úì {result}")
        except BarOnFireError as e:
            print(f"üî• {e}")
            break
        except Exception as e:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print()

    # –ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    print("–ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä:")
    try:
        process_order("–≥–¥–µ —Ç—É–∞–ª–µ—Ç")
    except BarOnFireError as e:
        print(f"üî• {e}")
    finally:
        print("–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")


# –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
if __name__ == "__main__":
    bar_scenario()
