#
# * 1
# from PIL import Image
# from PIL import UnidentifiedImageError
# from io import BytesIO
# import requests

# url = input()
# r = requests.get(url)

# try:
#     r.raise_for_status()
#     i = Image.open(BytesIO(r.content))
#     i.save("secret_file.jpg")
#     print("File saved")

# except requests.exceptions.HTTPError as e:
#     # Обработка 404, 500 и других HTTP-ошибок
#     print(
#         f"[ПРОВАЛ: СЕТЬ] Сервер вернул ошибку {r.status_code}. Ссылка не ведет на файл или недоступна."
#     )
#     print(f"Детали: {e}")

# except UnidentifiedImageError:
#     # Обработка случая, когда загруженные данные - не изображение
#     print(
#         f"[ПРОВАЛ: КОНТЕНТ] Данные загружены, но не являются распознаваемым изображением (вероятно, HTML-страница или поврежденный файл)."
#     )

# except requests.exceptions.RequestException as e:
#     # Обработка других сетевых ошибок (например, ConnectionError, Timeout)
#     print(f"[ПРОВАЛ: СЕТЬ] Произошла ошибка соединения или таймаут: {e}")

# except Exception as e:
#     # Общий обработчик для непредвиденных ошибок
#     print(f"[ПРОВАЛ: НЕПРЕДВИДЕННАЯ] Произошла ошибка: {e}")


# * 2
# Вы — главный оператор специального центра мониторинга веб-сайтов. Ваша
# задача — выполнять регулярную проверку доступности важных веб-порталов по
# всему миру. Ваш центр ответственен за обеспечение непрерывной работы этих
# веб-сайтов, поэтому вам необходимо иметь набор инструментов для
# мониторинга и проверки статуса.
# Ваша программа выполняет проверку доступности веб-сайтов, введенных вами
# в список `urls`. Она производит HTTP-запросы к каждому сайту и проверяет
# статус код ответа. Если статус код равен 200, сайт считается доступным, и
# вы выводите сообщение об этом. В противном случае, вы указываете в
# сообщении, что сайт недоступен, и выводите соответствующий статус код
import requests

try:
    with open("urls.txt", encoding="utf8") as f:
        urls = f.readlines()
except FileNotFoundError:
    print("File not found")
except Exception as e:
    print("Critical error", e)

# print(urls)

for site in urls:
    site = site.rstrip("\n")
    r = requests.get(site)
    if r.status_code == 200:
        print("Site is available")
    else:
        print(f"site is not not available, code {r.status_code}")
    # for attr in dir(r):
    #     atr = getattr(r, attr)
    #     print(atr, ":", attr)

# * 3
# Вы — главный разработчик приложения для цитат из аниме. Вы решаете
# использовать [API](https://docs.waifu.it/rest-api/texts/quote/search),
# чтобы предоставить пользователям широкий спектр цитат из разных аниме для
# их вдохновения.
# Напишите программу, которая превратит ваш компьютер в сокровищницу аниме-
# цитат! Каждый раз, когда вы запускаете программу, она будет выводить на
# экран случайную и вдохновляющую цитату из самых известных аниме
#  DISCORD AUTH NEEDED!

# * 4
# Вы отправляетесь в увлекательное путешествие по всему миру в роли
# знаменитого путешественника. Ваша задача — узнать актуальную погоду в
# любом городе, чтобы быть на шаг впереди и адаптироваться к любым
# природным условиям. Ведь только настоящие путешественники знают, что
# знание погоды — ключ к успеху!
# Чтобы получить данные о погоде в заданном городе, вам нужно всего лишь
# написать программу, которая будет принимать на вход название города и
# связываться с [волшебным API погодного
# сервиса](https://www.weatherapi.com/), чтобы достать самые точные и
# надежные данные о погоде в указанном городе
