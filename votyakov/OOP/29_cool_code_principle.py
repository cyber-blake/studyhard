#
# * 1
"""–û–¢–í–ï–¢: –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–ª–∞—Å—Å  Employee –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤,
–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ä–∞–∑–Ω—ã–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—è–º:  display_info
–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ,  generate_email
–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,  send_email
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.
–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–∞–∫
–∫–∞–∫ –∫–ª–∞—Å—Å  Employee  –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
—Ñ—É–Ω–∫—Ü–∏–π. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª–∞—Å—Å –º–µ–Ω–µ–µ –º–æ–¥—É–ª—å–Ω—ã–º –∏ —Å–ª–æ–∂–Ω—ã–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏
—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""


class Employee:
    def __init__(self, name, employee_id, position, mail):
        self.name = name
        self.employee_id = employee_id
        self.position = position
        self.mail = mail

    def display_info(self):
        print(f"Name: {self.name}")
        print(f"Employee ID: {self.employee_id}")
        print(f"Position: {self.position}")
        print(f"Mail: {self.mail}")


class EmailService:

    @staticmethod
    def generate_email(employee):
        return f"{employee.name.lower().replace(' ', '.')}.{employee.employee_id}@company.com"

    @staticmethod
    def send_email(recipient, subject, message):
        print(f"Sending email to {recipient}:\nSubject: {subject}\nMessage: {message}")


# * 2
class Discount:
    def __init__(self, customer, price):
        self.customer = customer
        self.price = price

    def give_discount(self):
        if self.customer == "FAV":
            return self.price * 0.2


class VipDiscount:
    def __init__(self, customer, price):
        self.customer = customer
        self.price = price

    def give_discount(self):
        if self.customer == "VIP":
            return self.price * 0.4


# * 3
class Shape:
    def area(self):
        raise NotImplementedError("–ú–µ—Ç–æ–¥ area() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")


class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def __str__(self):
        return f"Rectangle({self.width}x{self.height})"


class Square(Shape):
    def __init__(self, side):
        self.side = side

    def area(self):
        return self.side**2

    def __str__(self):
        return f"Square({self.side})"


def calculate_total_area(shapes):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä –≤ —Å–ø–∏—Å–∫–µ"""
    total_area = 0
    for shape in shapes:
        total_area += shape.area()
    return total_area


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—ã
    rectangle = Rectangle(4, 5)
    square = Square(3)

    print(f"–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: {rectangle.area()}")  # 20
    print(f"–ü–ª–æ—â–∞–¥—å –∫–≤–∞–¥—Ä–∞—Ç–∞: {square.area()}")  # 9

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å
    total = calculate_total_area([rectangle, square])
    print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total}")  # 29

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞
    shapes = [Rectangle(2, 3), Square(4), Rectangle(5, 2), Square(6)]

    print("\n–í—Å–µ —Ñ–∏–≥—É—Ä—ã:")
    for i, shape in enumerate(shapes, 1):
        print(f"{i}. {shape}: –ø–ª–æ—â–∞–¥—å = {shape.area()}")

    print(f"\n–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä: {calculate_total_area(shapes)}")
# * 4
from abc import ABC, abstractmethod


class Walker(ABC):
    @abstractmethod
    def walk(self):
        pass


class Swimmer(ABC):
    @abstractmethod
    def swim(self):
        pass


class Flyer(ABC):
    @abstractmethod
    def fly(self):
        pass


class Bird(ABC):

    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name


class Crow(Bird, Walker, Flyer):

    def walk(self):
        return f"{self.name} —Ö–æ–¥–∏—Ç –≤—Ä–∞–∑–≤–∞–ª–æ—á–∫—É"

    def fly(self):
        return f"{self.name} –ª–µ—Ç–∞–µ—Ç –≤—ã—Å–æ–∫–æ –≤ –Ω–µ–±–µ"


class Penguin(Bird, Walker, Swimmer):

    def walk(self):
        return f"{self.name} —Ö–æ–¥–∏—Ç –≤–ø–µ—Ä–µ–≤–∞–ª–∫—É"

    def swim(self):
        return f"{self.name} –æ—Ç–ª–∏—á–Ω–æ –ø–ª–∞–≤–∞–µ—Ç –≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–µ"


# * 5
from abc import ABC, abstractmethod


class Device(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""

    @abstractmethod
    def turn_on(self):
        """–í–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        pass

    @abstractmethod
    def turn_off(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        pass


class Lamp(Device):
    """–ö–ª–∞—Å—Å –õ–∞–º–ø—ã"""

    def __init__(self, name="–õ–∞–º–ø–∞"):
        self.name = name
        self.is_on = False
def turn_on(self):
        self.is_on = True
        print(f"{self.name} –≤–∫–ª—é—á–µ–Ω–∞")

    def turn_off(self):
        self.is_on = False
        print(f"{self.name} –≤—ã–∫–ª—é—á–µ–Ω–∞")

    def __str__(self):
        return f"{self.name} ({'–≤–∫–ª' if self.is_on else '–≤—ã–∫–ª'})"


class MotionSensor(Device):
    """–ö–ª–∞—Å—Å –î–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"""

    def __init__(self, name="–î–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è"):
        self.name = name
        self.is_on = False

    def turn_on(self):
        self.is_on = True
        print(f"{self.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    def turn_off(self):
        self.is_on = False
        print(f"{self.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    def detect_motion(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"""
        if self.is_on:
            print(f"{self.name} –æ–±–Ω–∞—Ä—É–∂–∏–ª –¥–≤–∏–∂–µ–Ω–∏–µ!")
        else:
            print(f"{self.name} –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ –º–æ–∂–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ")

    def __str__(self):
        return f"{self.name} ({'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_on else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})"


class Thermostat(Device):
    """–ö–ª–∞—Å—Å –¢–µ—Ä–º–æ—Å—Ç–∞—Ç–∞"""

    def __init__(self, name="–¢–µ—Ä–º–æ—Å—Ç–∞—Ç", temperature=20):
        self.name = name
        self.is_on = False
        self.temperature = temperature

    def turn_on(self):
        self.is_on = True
        print(f"{self.name} –≤–∫–ª—é—á–µ–Ω, —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temperature}¬∞C")

    def turn_off(self):
        self.is_on = False
        print(f"{self.name} –≤—ã–∫–ª—é—á–µ–Ω")

    def set_temperature(self, temp):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        if self.is_on:
            self.temperature = temp
            print(f"{self.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        else:
            print(f"{self.name} –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")

    def __str__(self):
        return f"{self.name} ({self.temperature}¬∞C, {'–≤–∫–ª' if self.is_on else '–≤—ã–∫–ª'})"


class SmartHome:
    """–£–º–Ω—ã–π –¥–æ–º, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é Device"""

    def __init__(self, devices=None):
        # SmartHome –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ Device, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        self.devices = devices if devices else []

    def add_device(self, device: Device):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —É–º–Ω—ã–π –¥–æ–º"""
        self.devices.append(device)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    def remove_device(self, device: Device):
        """–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
        if device in self.devices:
            self.devices.remove(device)
            print(f"–£–¥–∞–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    def turn_on(self):
        """–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("üîå –í–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• –£–°–¢–†–û–ô–°–¢–í:")
        for device in self.devices:
            device.turn_on()
        print()

    def turn_off(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("üîå –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• –£–°–¢–†–û–ô–°–¢–í:")
        for device in self.devices:
            device.turn_off()
        print()

    def turn_on_selected(self, device_names):
        """–í–∫–ª—é—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏"""
        print(f"üîå –í–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í: {device_names}")
        for device in self.devices:
            if any(name in str(device) for name in device_names):
                device.turn_on()
        print()

    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("üìä –°–¢–ê–¢–£–° –£–°–¢–†–û–ô–°–¢–í:")
        for i, device in enumerate(self.devices, 1):
            print(f"  {i}. {device}")
        print()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ)
class SmartTV(Device):
    """–£–º–Ω—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"""

    def __init__(self, name="–£–º–Ω—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"):
        self.name = name
        self.is_on = False

    def turn_on(self):
        self.is_on = True
        print(f"{self.name} –≤–∫–ª—é—á–µ–Ω")

    def turn_off(self):
        self.is_on = False
        print(f"{self.name} –≤—ã–∫–ª—é—á–µ–Ω")

    def __str__(self):
        return f"{self.name} ({'–≤–∫–ª' if self.is_on else '–≤—ã–∫–ª'})"


class SecurityCamera(Device):
    """–ö–∞–º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self, name="–ö–∞–º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"):
        self.name = name
        self.is_on = False

    def turn_on(self):
        self.is_on = True
        print(f"{self.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –≤–µ–¥–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ")

    def turn_off(self):
        self.is_on = False
        print(f"{self.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    def __str__(self):
        return f"{self.name} ({'–∞–∫—Ç–∏–≤–Ω–∞' if self.is_on else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})"


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    print("üè† –°–ò–°–¢–ï–ú–ê –£–ú–ù–û–ì–û –î–û–ú–ê\n")

    # –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    lamp = Lamp("–ì–æ—Å—Ç–∏–Ω–Ω–∞—è –ª–∞–º–ø–∞")
    motion_sensor = MotionSensor("–ü—Ä–∏—Ö–æ–∂–∞—è –¥–∞—Ç—á–∏–∫")
    thermostat = Thermostat("–ö–æ—Ç–µ–ª", 22)
    tv = SmartTV("Samsung TV")
    camera = SecurityCamera("–£–ª–∏—á–Ω–∞—è –∫–∞–º–µ—Ä–∞")

    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –¥–æ–º
    smart_home = SmartHome([lamp, motion_sensor, thermostat])

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    smart_home.add_device(tv)
    smart_home.add_device(camera)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    smart_home.get_status()

    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    smart_home.turn_on()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    motion_sensor.detect_motion()
    thermostat.set_temperature(24)

    print()
    smart_home.get_status()

    # –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    smart_home.turn_off()

    # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    smart_home.turn_on_selected(["–ª–∞–º–ø–∞", "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä"])
# * 6
from abc import ABC, abstractmethod
from typing import Optional


class Transferable(ABC):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã"""

    @abstractmethod
    def transfer(self, amount: float, target_account: "Account") -> bool:
        pass


class AccountInterface(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤"""

    @abstractmethod
    def deposit(self, amount: float) -> None:
        pass

    @abstractmethod
    def withdraw(self, amount: float) -> bool:
        pass

    @abstractmethod
    def get_balance(self) -> float:
        pass


class Account(AccountInterface, Transferable):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞"""

    def __init__(self, account_number: str, balance: float = 0.0):
        self._account_number = account_number
        self._balance = balance

    def deposit(self, amount: float) -> None:
        if amount > 0:
            self._balance += amount
            print(f"–í–Ω–µ—Å–µ–Ω–æ {amount:.2f} –Ω–∞ —Å—á–µ—Ç {self._account_number}")
        else:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

    def withdraw(self, amount: float) -> bool:
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        if self._balance >= amount:
            self._balance -= amount
            print(f"–°–Ω—è—Ç–æ {amount:.2f} —Å–æ —Å—á–µ—Ç–∞ {self._account_number}")
            return True
        else:
            print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ {self._account_number}")
            return False

    def get_balance(self) -> float:
        return self._balance

    def transfer(self, amount: float, target_account: "Account") -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—á–µ—Ç"""
        if not isinstance(target_account, Account):
            raise TypeError("–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Account")

        print(
            f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {amount:.2f} —Å {self._account_number} –Ω–∞ {target_account._account_number}"
        )

        if self.withdraw(amount):
            target_account.deposit(amount)
            print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        else:
            print(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return False

    def get_account_number(self) -> str:
        return self._account_number

    def __str__(self):
        return f"–°—á–µ—Ç {self._account_number}: {self._balance:.2f}"


class SavingsAccount(Account):

    def __init__(
        self, account_number: str, balance: float = 0.0, interest_rate: float = 0.0
    ):
        super().__init__(account_number, balance)
        self._interest_rate = interest_rate

    def calculate_interest(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —Å—á–µ—Ç—É"""
        interest = self._balance * (self._interest_rate / 100)
        print(f"–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {interest:.2f}")
        return interest

    def get_interest_rate(self) -> float:
        return self._interest_rate

    def apply_interest(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫ –±–∞–ª–∞–Ω—Å—É"""
        interest = self.calculate_interest()
        self.deposit(interest)

    def __str__(self):
        return f"–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π {super().__str__()}, —Å—Ç–∞–≤–∫–∞: {self._interest_rate}%"


class CheckingAccount(Account):
    """–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏"""

    def __init__(
        self, account_number: str, balance: float = 0.0, fee_percentage: float = 0.0
    ):
        super().__init__(account_number, balance)
        self._fee_percentage = fee_percentage

    def deduct_fees(self) -> None:
        """–í—ã—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—é"""
        fee = self._balance * (self._fee_percentage / 100)
        if self.withdraw(fee):
            print(f"–°–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: {fee:.2f}")

    def get_fee_percentage(self) -> float:
        return self._fee_percentage

    def __str__(self):
        return f"–¢–µ–∫—É—â–∏–π {super().__str__()}, –∫–æ–º–∏—Å—Å–∏—è: {self._fee_percentage}%"


class TransferService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"""

    @staticmethod
    def execute_transfer(source: Transferable, target: Account, amount: float) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"""
        if not isinstance(source, Transferable):
            raise TypeError(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Transferable"
            )

        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        print(f"\nüîÑ –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù –ü–ï–†–ï–í–û–î:")
        print(f"   –û—Ç: {source}")
        print(f"   –ö–æ–º—É: {target}")
        print(f"   –°—É–º–º–∞: {amount:.2f}")

        success = source.transfer(amount, target)

        if success:
            print("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        return success

    @staticmethod
    def bulk_transfer(transfers: list) -> dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        results = {"successful": 0, "failed": 0, "details": []}

        for source, target, amount in transfers:
            try:
                success = TransferService.execute_transfer(source, target, amount)
                if success:
                    results["successful"] += 1
                else:
                    results["failed"] += 1
                results["details"].append(
                    {
                        "source": source.get_account_number(),
                        "target": target.get_account_number(),
                        "amount": amount,
                        "success": success,
                    }
                )
            except Exception as e:
                results["failed"] += 1
                results["details"].append(
                    {
                        "source": source.get_account_number(),
                        "target": target.get_account_number(),
                        "amount": amount,
                        "success": False,
                        "error": str(e),
                    }
                )

        return results


class Bank:
    """–ë–∞–Ω–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å—á–µ—Ç–∞–º–∏"""

    def __init__(self):
        self._accounts = {}
        self._transfer_service = TransferService()

    def add_account(self, account: Account) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç –≤ –±–∞–Ω–∫"""
        self._accounts[account.get_account_number()] = account
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—á–µ—Ç: {account}")

    def remove_account(self, account_number: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç –∏–∑ –±–∞–Ω–∫–∞"""
        if account_number in self._accounts:
            account = self._accounts.pop(account_number)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Å—á–µ—Ç: {account}")
            return True
        return False

    def get_account(self, account_number: str) -> Optional[Account]:
        """–ù–∞–π—Ç–∏ —Å—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É"""
        return self._accounts.get(account_number)

    def transfer_funds(
        self, source_account_number: str, destination_account_number: str, amount: float
    ) -> bool:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"""
        source = self.get_account(source_account_number)
        destination = self.get_account(destination_account_number)

        if not source:
            raise ValueError(f"–°—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ {source_account_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not destination:
            raise ValueError(f"–°—á–µ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å {destination_account_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if source == destination:
            raise ValueError("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç")

        return self._transfer_service.execute_transfer(source, destination, amount)

    def get_total_balance(self) -> float:
        """–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤"""
        return sum(account.get_balance() for account in self._accounts.values())

    def display_accounts(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞"""
        print("\nüìä –í–°–ï –°–ß–ï–¢–ê –í –ë–ê–ù–ö–ï:")
        for account in self._accounts.values():
            print(f"   {account}")
        print(f"   –ò–¢–û–ì–û: {self.get_total_balance():.2f}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏


class BusinessAccount(Account):
    """–ë–∏–∑–Ω–µ—Å-—Å—á–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""

    def __init__(
        self, account_number: str, balance: float = 0.0, credit_limit: float = 0.0
    ):
        super().__init__(account_number, balance)
        self._credit_limit = credit_limit

    def withdraw(self, amount: float) -> bool:
        """–°–Ω—è—Ç–∏–µ —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        available_funds = self._balance + self._credit_limit
        if amount <= available_funds:
            self._balance -= amount
            print(f"–°–Ω—è—Ç–æ {amount:.2f} —Å–æ —Å—á–µ—Ç–∞ {self._account_number}")
            return True
        return False

    def __str__(self):
        return f"–ë–∏–∑–Ω–µ—Å {super().__str__()}, –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: {self._credit_limit:.2f}"


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    print("üè¶ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ù–ö–û–í–°–ö–ò–ú–ò –°–ß–ï–¢–ê–ú–ò\n")

    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç–∞
    savings_account = SavingsAccount(
        account_number="SAV-001", balance=1000, interest_rate=5
    )
    checking_account = CheckingAccount(
        account_number="CHK-001", balance=500, fee_percentage=2
    )
    business_account = BusinessAccount(
        account_number="BUS-001", balance=2000, credit_limit=1000
    )

    # –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç–∞
    bank = Bank()
    bank.add_account(savings_account)
    bank.add_account(checking_account)
    bank.add_account(business_account)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüí∞ –ù–ê–ß–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:")
    print(f"–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç: {savings_account.get_balance():.2f}")
    print(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {checking_account.get_balance():.2f}")
    print(f"–ë–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {business_account.get_balance():.2f}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    bank.transfer_funds(
        source_account_number="SAV-001",
        destination_account_number="CHK-001",
        amount=500,
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüí∞ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ë–ê–õ–ê–ù–°–´:")
    print(f"–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç: {savings_account.get_balance():.2f}")
    print(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {checking_account.get_balance():.2f}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:")
    savings_account.apply_interest()
    checking_account.deduct_fees()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
    bank.display_accounts()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    print("\nüîÑ –ú–ê–°–°–û–í–´–ï –ü–ï–†–ï–í–û–î–´:")
    transfers = [
        (savings_account, checking_account, 100),
        (business_account, savings_account, 300),
        (checking_account, business_account, 50),
    ]

    results = TransferService.bulk_transfer(transfers)
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {results['successful']}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {results['failed']}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    bank.display_accounts()
