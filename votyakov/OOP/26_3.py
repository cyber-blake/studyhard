from datetime import datetime


class Emerald:
    def __init__(self):
        self.__status = 0  # 0-–Ω–µ —É—á—Ç—ë–Ω, 1-—É—á—Ç—ë–Ω, 2-–ø–æ–¥ —Å–ø—É–¥–æ–º
        self.__price = 0

    @property
    def status(self):
        return self.__status

    def _set_status(self, new_status):
        if new_status >= self.__status:
            self.__status = new_status
        else:
            raise ValueError("–°—Ç–∞—Ç—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–Ω–∏–∂–µ–Ω")

    @property
    def price(self):
        return self.__price

    def _set_price(self, price):
        if price >= 0:
            self.__price = price
        else:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

    def evaluate(self, price):
        """–û—Ü–µ–Ω–∏—Ç—å –∏–∑—É–º—Ä—É–¥"""
        self._set_price(price)

    def account(self):
        """–£—á–µ—Å—Ç—å –∏–∑—É–º—Ä—É–¥"""
        self._set_status(1)

    def store(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥ —Å–ø—É–¥"""
        self._set_status(2)


class Shell:
    def __init__(self):
        self.__status = 0  # 0-–Ω–µ —É—á—Ç–µ–Ω–∞, 1-—É—á—Ç–µ–Ω–∞, 2-–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, 3-–ø–µ—Ä–µ–ø–ª–∞–≤–ª–µ–Ω–∞
        self.__price = 0

    @property
    def status(self):
        return self.__status

    def _set_status(self, new_status):
        if new_status >= self.__status:
            self.__status = new_status
        else:
            raise ValueError("–°—Ç–∞—Ç—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–Ω–∏–∂–µ–Ω")

    @property
    def price(self):
        return self.__price

    def _set_price(self, price):
        if price >= 0:
            self.__price = price
        else:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

    def evaluate(self, price):
        """–û—Ü–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–ª—É–ø–∫—É"""
        self._set_price(price)

    def account(self):
        """–£—á–µ—Å—Ç—å —Å–∫–æ—Ä–ª—É–ø–∫—É"""
        self._set_status(1)

    def process(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–Ω–µ—Ç–æ–ª–∏—Ç–µ–π–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"""
        self._set_status(2)

    def smelt(self):
        """–ü–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å –≤ –º–æ–Ω–µ—Ç—É"""
        self._set_status(3)


class Coin:
    def __init__(self, serial_number, year, value):
        self.__serial_number = serial_number
        self.__year = year
        self.__value = value

    @property
    def serial_number(self):
        return self.__serial_number

    @property
    def year(self):
        return self.__year

    @property
    def value(self):
        return self.__value


class Entry:
    _id_counter = 0

    def __init__(self, item, date=None, info="", secret=False):
        Entry._id_counter += 1
        self.__ID = Entry._id_counter
        self.__item = item
        self.__date = date if date else datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        self.__info = info
        self.__secret = secret

    @property
    def ID(self):
        return self.__ID

    @property
    def item(self):
        return self.__item

    @property
    def date(self):
        return self.__date

    @property
    def info(self):
        return self.__info

    @info.setter
    def info(self, new_info):
        self.__info = new_info

    @property
    def secret(self):
        return self.__secret

    def classify(self):
        """–ó–∞—Å–µ–∫—Ä–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        self.__secret = True

    def declassify(self):
        """–†–∞—Å—Å–µ–∫—Ä–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        self.__secret = False

    def __str__(self):
        item_type = type(self.__item).__name__
        secret_status = "üîí" if self.__secret else "üîì"
        return f"{secret_status} –ó–∞–ø–∏—Å—å #{self.__ID}: {item_type} ({self.__date})"


class Archive:
    def __init__(self):
        self.__storage = []

    def add(self, entry):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤"""
        if not isinstance(entry, Entry):
            raise ValueError("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã Entry")
        self.__storage.append(entry)

    def get(self, index):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if index < 0 or index >= len(self.__storage):
            return None

        entry = self.__storage[index]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—É—é –∏–ª–∏ –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        if entry is None or entry.secret:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        item = entry.item
        item_info = {}

        if isinstance(item, Emerald):
            item_info = {"type": "Emerald", "status": item.status, "price": item.price}
        elif isinstance(item, Shell):
            item_info = {"type": "Shell", "status": item.status, "price": item.price}
        elif isinstance(item, Coin):
            item_info = {
                "type": "Coin",
                "serial_number": item.serial_number,
                "year": item.year,
                "value": item.value,
            }

        return {
            "entry_id": entry.ID,
            "entry_date": entry.date,
            "entry_info": entry.info,
            "item_info": item_info,
        }

    def edit(self, index, new_info):
        """–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–ø–∏—Å–∏"""
        if index < 0 or index >= len(self.__storage):
            return False

        entry = self.__storage[index]
        if entry is None:
            return False

        entry.info = new_info
        return True

    def classify(self, index):
        """–ó–∞—Å–µ–∫—Ä–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if 0 <= index < len(self.__storage) and self.__storage[index] is not None:
            self.__storage[index].classify()
            return True
        return False

    def declassify(self, index):
        """–†–∞—Å—Å–µ–∫—Ä–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if 0 <= index < len(self.__storage) and self.__storage[index] is not None:
            self.__storage[index].declassify()
            return True
        return False

    def delete(self, index):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ None)"""
        if 0 <= index < len(self.__storage):
            self.__storage[index] = None
            return True
        return False

    @property
    def display(self):
        """Getter –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –∞—Ä—Ö–∏–≤–∞"""
        result = "=== –ê–†–•–ò–í –ö–ê–ó–ù–´ ===\n"

        for i, entry in enumerate(self.__storage):
            result += f"[{i}] "
            if entry is None:
                result += "üóëÔ∏è –£–î–ê–õ–ï–ù–û\n"
            else:
                result += str(entry) + "\n"
                if not entry.secret:
                    item = entry.item
                    if isinstance(item, Emerald):
                        statuses = ["–ù–µ —É—á—Ç—ë–Ω", "–£—á—Ç—ë–Ω", "–ü–æ–¥ —Å–ø—É–¥–æ–º"]
                        result += f"    –°—Ç–∞—Ç—É—Å: {statuses[item.status]}, –¶–µ–Ω–∞: {item.price} –∑–æ–ª–æ—Ç—ã—Ö\n"
                    elif isinstance(item, Shell):
                        statuses = [
                            "–ù–µ —É—á—Ç–µ–Ω–∞",
                            "–£—á—Ç–µ–Ω–∞",
                            "–í –æ—Ç–¥–µ–ª–µ–Ω–∏–∏",
                            "–ü–µ—Ä–µ–ø–ª–∞–≤–ª–µ–Ω–∞",
                        ]
                        result += f"    –°—Ç–∞—Ç—É—Å: {statuses[item.status]}, –¶–µ–Ω–∞: {item.price} –∑–æ–ª–æ—Ç—ã—Ö\n"
                    elif isinstance(item, Coin):
                        result += f"    –°–µ—Ä–∏—è: {item.serial_number}, –ì–æ–¥: {item.year}, –ù–æ–º–∏–Ω–∞–ª: {item.value}\n"
                    if entry.info:
                        result += f"    –ò–Ω—Ñ–æ: {entry.info}\n"
                else:
                    result += "    üîí –°–ï–ö–†–ï–¢–ù–û\n"
            result += "\n"

        return result

    def get_coins_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç–∞—Ö"""
        coins_info = []
        for i, entry in enumerate(self.__storage):
            if entry is not None and not entry.secret and isinstance(entry.item, Coin):
                coin = entry.item
                coins_info.append(
                    {
                        "index": i,
                        "serial_number": coin.serial_number,
                        "year": coin.year,
                        "value": coin.value,
                        "entry_info": entry.info,
                    }
                )
        return coins_info

    @property
    def _safe_storage_access(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return self.__storage

    def get_entry(self, index):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.__storage):
            return self.__storage[index]
        return None


def main():
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    archive = Archive()

    print("=== –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É—á–µ—Ç 20 —Å–∫–æ—Ä–ª—É–ø–æ–∫ –∏ 10 –∏–∑—É–º—Ä—É–¥–æ–≤ ===")
    shells = [Shell() for _ in range(20)]
    emeralds = [Emerald() for _ in range(10)]

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∏ —É—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    for i, shell in enumerate(shells):
        shell.evaluate(50 + i)
        shell.account()
        archive.add(Entry(shell, info=f"–ó–æ–ª–æ—Ç–∞—è —Å–∫–æ—Ä–ª—É–ø–∫–∞ #{i+1}"))

    for i, emerald in enumerate(emeralds):
        emerald.evaluate(100 + i * 10)
        emerald.account()
        archive.add(Entry(emerald, info=f"–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –∏–∑—É–º—Ä—É–¥ #{i+1}"))

    print(archive.display)

    print("=== –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ ===")
    for i in range(len(archive._safe_storage_access)):
        entry = archive.get_entry(i)
        if entry:
            item = entry.item
            if isinstance(item, Emerald):
                item.store()
            elif isinstance(item, Shell):
                item.process()

    print(archive.display)

    print("=== –®–ê–ì 3: –ü–µ—Ä–µ–ø–ª–∞–≤–∫–∞ —Å–∫–æ—Ä–ª—É–ø–æ–∫ –≤ –º–æ–Ω–µ—Ç—ã ===")
    coin_counter = 1
    storage_size = len(archive._safe_storage_access)

    for i in range(storage_size):
        entry = archive.get_entry(i)
        if entry and isinstance(entry.item, Shell):
            shell = entry.item

            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–æ–∑–¥–∞–µ–º –º–æ–Ω–µ—Ç—É, –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            coin = Coin(f"CN-2024-{coin_counter:03d}", 2024, shell.price // 10)
            coin_entry = Entry(coin, info=f"–ú–æ–Ω–µ—Ç–∞ –∏–∑ —Å–∫–æ—Ä–ª—É–ø–∫–∏ #{coin_counter}")
            archive.add(coin_entry)  # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–æ–Ω–µ—Ç–µ

            shell.smelt()  # –ü–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–æ—Ä–ª—É–ø–∫–∏
            coin_counter += 1

    print(archive.display)

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ ...

    print("=== –®–ê–ì 4: –ó–∞—Å–µ–∫—Ä–µ—á–∏–≤–∞–Ω–∏–µ –∏–∑—É–º—Ä—É–¥–æ–≤ ===")
    # –ó–∞—Å–µ–∫—Ä–µ—á–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑—É–º—Ä—É–¥–∞—Ö
    for i in range(len(archive._Archive__storage)):
        entry = archive._Archive__storage[i]
        if entry is not None and isinstance(entry.item, Emerald):
            archive.classify(i)

    print(archive.display)

    print("=== –®–ê–ì 5: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Å–∫–æ—Ä–ª—É–ø–∫–∞—Ö ===")
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–∫–æ—Ä–ª—É–ø–∫–∞—Ö
    for i in range(len(archive._Archive__storage)):
        entry = archive._Archive__storage[i]
        if entry is not None and isinstance(entry.item, Shell):
            archive.delete(i)

    print(archive.display)

    print("=== –®–ê–ì 6: –†–∞—Å—Å–µ–∫—Ä–µ—á–∏–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–∑—É–º—Ä—É–¥–æ–≤ ===")
    # –†–∞—Å—Å–µ–∫—Ä–µ—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å –æ–± –∏–∑—É–º—Ä—É–¥–∞—Ö
    for i in range(len(archive._Archive__storage)):
        entry = archive._Archive__storage[i]
        if entry is not None and isinstance(entry.item, Emerald) and i % 2 == 0:
            archive.declassify(i)
            archive.edit(i, "–†–∞—Å—Å–µ–∫—Ä–µ—á–µ–Ω–Ω—ã–π –∏–∑—É–º—Ä—É–¥ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")

    print(archive.display)

    print("=== –®–ê–ì 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–∞—Ö ===")
    coins_info = archive.get_coins_info()
    print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç–∞—Ö –≤ –∞—Ä—Ö–∏–≤–µ:")
    for coin in coins_info:
        print(
            f"–ú–æ–Ω–µ—Ç–∞ {coin['serial_number']}: –Ω–æ–º–∏–Ω–∞–ª {coin['value']}, –≥–æ–¥ {coin['year']}"
        )


if __name__ == "__main__":
    main()
